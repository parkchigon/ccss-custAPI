package com.lgu.ccss.common.interceptor;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpHeaders;
import org.apache.http.HttpStatus;
import org.apache.http.protocol.HTTP;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceAware;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.google.gson.Gson;
import com.lgu.ccss.common.constant.HeaderConst;
import com.lgu.ccss.common.constant.MDCConst;
import com.lgu.ccss.common.dao.DeviceSessDao;
import com.lgu.ccss.common.dao.mgr.MgrAppSessionDao;
import com.lgu.ccss.common.model.DeviceSessVO;
import com.lgu.ccss.common.model.RequestCommonJSON;
import com.lgu.ccss.common.model.RequestJSON;
import com.lgu.ccss.common.model.ResponseJSON;
import com.lgu.ccss.common.tlo.TloData;
import com.lgu.ccss.common.tlo.TloUtil;
import com.lgu.ccss.common.util.CCSSUtil;
import com.lgu.ccss.common.util.ResultCodeUtil;
import com.lgu.common.http.HttpRequestWrapper;
import com.lgu.common.http.HttpResponseWrapper;
import com.lgu.common.model.ResultCode;
import com.lgu.common.tlo.TloWriter;
import com.lgu.common.trace.TraceConst;
import com.lgu.common.trace.TraceWriter;
import com.lgu.common.util.DateUtils;
import com.lgu.common.util.ExceptionUtil;
import com.lgu.common.util.HttpHeaderUtils;
import com.lgu.common.util.StringUtils;

import devonframe.util.RandomUtil;

/**
 * 컨트롤러의 전반적인 전후 처리를 위한 인터셉터 클래스. <br/>
 * 시스템 점검, 요청 정보 등을 다룬다.
 * 
 */
public class RequestInterceptor extends HandlerInterceptorAdapter implements MessageSourceAware {

	private static final Logger logger = LoggerFactory.getLogger(RequestInterceptor.class);

	private Pattern VALID_USER_AGENT_REGEX = Pattern.compile("\\[(.*)\\,(.*)\\]", Pattern.CASE_INSENSITIVE);

	@Value("#{systemProperties.SERVER_ID}")
	private String serverId;

	@Value("#{config['session.timeoutMin']}")
	private String sessionTimeoutMin;

	@Value("#{config['mgrapp.session.timeoutMin']}")
	private String mgrappSessionTimeoutMin;

	@Autowired
	private DeviceSessDao deviceSessDao;

	@Autowired
	private MgrAppSessionDao mgrAppSessionDao;

	@Autowired
	private TloWriter tloWriter;

	@Autowired
	private TraceWriter traceWriter;

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		logger.debug("requestURL:" + request.getRequestURI());
		
		try {
			String requestUrl = StringUtils.nvl(request.getRequestURI());
			
			if (requestUrl.startsWith("/api/internal")) {
				return true;
			}
	
			if (requestUrl.startsWith("/api") || requestUrl.startsWith("/bmapi")) {
				setRequestLogAPI((HttpRequestWrapper) request);
	
				boolean sessionStatus = checkSessionAPI(request, response);
				if (sessionStatus == false) {
					return false;
				}

			} else if (requestUrl.startsWith("/mypage")) {
				setRequestLogPNDManager(request);
	
			} else if (requestUrl.startsWith("/mgrapi")) {
				
				if( request.getMethod().equals("POST") )
				{
					setRequestLogMGRAPI((HttpRequestWrapper) request);
		
					boolean sessionStatus = checkSessionMgrApp(request, response);
					if (sessionStatus == false) {
						return false;
					}
				} else if( request.getMethod().equals("GET") )
				{	
					//checkSessionMgrApp
					setRequestLogMGRAPIGetMethod((HttpRequestWrapper) request);
					
					boolean sessionStatus = checkSessionMgrAppGetMethod(request, response);
					if (sessionStatus == false) {
						return false;
					}
				}
			
			} else if (requestUrl.startsWith("/push")) {
				setRequestLogMqtt(request);
			}
		}
		catch (Exception e) {
			logger.error("Exception({})", e);
		}

		return super.preHandle(request, response, handler);
	}

	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView mav)
			throws Exception {

		logger.debug("requestURL:" + request.getRequestURI());
		try {
			String requestUrl = StringUtils.nvl(request.getRequestURI());
			if (requestUrl.startsWith("/api/internal")) {
				return;
			}
			
			/*if (requestUrl.equals("/mgrapi/gcalendar/login"))
			{
				return;
			}*/
	
			if (requestUrl.startsWith("/api") || requestUrl.startsWith("/mgrapi") || requestUrl.startsWith("/bmapi")) {
				
				String transactionId = request.getHeader(HeaderConst.HD_NAME_TRANSACTION_ID);
				if (transactionId != null && transactionId.length() > 0) {
					response.setHeader(HeaderConst.HD_NAME_TRANSACTION_ID, transactionId);
				}
	
				if (requestUrl.startsWith("/api") || requestUrl.startsWith("/bmapi")) {
					setResponseLogAPI(request, response);
				} else {
					if( request.getMethod().equals("POST") )
					{
						setResponseLogMGRAPI(request, response);
					} else if( request.getMethod().equals("GET") )
					{
						setResponseLogMGRAPIGetMethod(request, response);
					}
				}
	
			} else if (requestUrl.startsWith("/mypage")) {
				setResponseLogPNDManager(request, response);
				
			} else if (requestUrl.startsWith("/push")) {
				setResponseLogMqtt(request, response);
			}
	
			// response.setHeader("Connection", "close");
		}
		catch (Exception e) {
			logger.error("Exception({})", e);
			
		} finally {
			MDC.clear();
		}
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {

	}

	public String getTrId(HttpServletRequest httpServletRequest) {

		HttpSession session = httpServletRequest.getSession(true);
		String trId = "TR_" + DateUtils.getMillisecondsTime() + RandomUtil.getRandomStr('A', 'Z')
				+ RandomUtil.getRandomNum(1, 10000);
		session.setAttribute("TID", trId);
		return trId;
	}

	private boolean checkSessionAPI(HttpServletRequest request, HttpServletResponse response) {
		String ccssToken = StringUtils.nvl(request.getHeader("ccssToken"));
		String requestUrl = StringUtils.nvl(request.getRequestURI());

		if (logger.isDebugEnabled()) {
			logger.debug("checkSession IN. ccssToken({}) requestUrl({})", ccssToken, requestUrl);
		}

		try {
			if (requestUrl.startsWith("/api/authentication") || requestUrl.startsWith("/bmapi/authentication")) {
				return true;
			}

			if (ccssToken == null || ccssToken.length() == 0) {
				logger.error("abnormal ccssToken value. ccssToken({})", ccssToken);
				sessionMgrFailMsg(request, response, ResultCodeUtil.RC_3C003004, CCSSUtil.getCtn());
				return false;
			}
			String sessExpDt = CCSSUtil.getSessExpDt();
			if (sessExpDt == null || sessExpDt.length() == 0) {
				logger.error("failed to select Session Info. ccssToken({})", ccssToken);
				sessionMgrFailMsg(request, response, ResultCodeUtil.RC_3C003004, CCSSUtil.getCtn());
				return false;
			}
			if (comparedSessionExpire(CCSSUtil.getSessExpDt())) {
				logger.info("Timeout Session. ccssToken({}) deviceCtn({}) sessExpDt({})", ccssToken, CCSSUtil.getCtn(),
						CCSSUtil.getSessExpDt());
				deviceSessDao.deleteDeviceSessByID(ccssToken);
				sessionMgrFailMsg(request, response, ResultCodeUtil.RC_3C003000, CCSSUtil.getCtn());
				return false;
			} else {
				String connIp = HttpHeaderUtils.getClientIPAddr(request);
				String expDate = DateUtils.getCurrentDate(Calendar.MINUTE, Integer.parseInt(sessionTimeoutMin),
						DateUtils.DATE_FORMAT_YMDHMS);
				
				if (expDate.compareTo(CCSSUtil.getSessExpDt()) < 0) {
					expDate = CCSSUtil.getSessExpDt();
				}
				
				deviceSessDao.updateDeviceSessTime(ccssToken, expDate, connIp);
			}

		} catch (Exception e) {
			logger.error("ccssToken({}) Exception({})", ccssToken, e);
			return false;
		}

		if (logger.isDebugEnabled()) {
			logger.debug("checkSession OUT. ccssToken({})", ccssToken);
		}

		return true;
	}

	private boolean checkSessionMgrApp(HttpServletRequest request, HttpServletResponse response) {
		String requestUrl = StringUtils.nvl(request.getRequestURI());
		String sessionId = StringUtils.nvl(request.getHeader("sessionId"));
		String randomKey = StringUtils.nvl(request.getHeader("randomKey"));

		if (logger.isDebugEnabled()) {
			logger.debug("checkSessionMgrApp IN. sessionId({}) requestUrl({})", sessionId, requestUrl);
		}

		try {
			// ignore URL Area
			if (requestUrl.equals("/mgrapi/authentication/register")
					|| requestUrl.equals("/mgrapi/authentication/version")
					|| requestUrl.equals("/mgrapi/authentication/sms/send")
					|| requestUrl.equals("/mgrapi/authentication/sms/cert")
					|| requestUrl.equals("/mgrapi/authentication/login")
					) {

				return true;
			}
			
			if (sessionId == null || sessionId.length() == 0) {
				logger.error("abnormal sessionId value. sessionId({})", sessionId);
				sessionMgrFailMsg(request, response, ResultCodeUtil.RC_3C004000, CCSSUtil.getMgrUserLoginId());
				return false;
			}

			String mgrSessExpDt = CCSSUtil.getMgrSessExpDt();
			if (mgrSessExpDt == null || mgrSessExpDt.length() == 0) {
				logger.error("failed to select Mgrapp Session Info. sessionId({})", sessionId);
				sessionMgrFailMsg(request, response, ResultCodeUtil.RC_3C003007, CCSSUtil.getMgrUserLoginId());
				return false;
			}

			if (comparedSessionExpire(CCSSUtil.getMgrSessExpDt())) {
				logger.info("Mgr App Timeout Session. sessionId({}) mgrappLoginId({}) mgrSessExpDt({})", sessionId,
						CCSSUtil.getMgrUserLoginId(), CCSSUtil.getMgrSessExpDt());
				mgrAppSessionDao.deleteMgrSessByID(sessionId);
				sessionMgrFailMsg(request, response, ResultCodeUtil.RC_3C003008, CCSSUtil.getMgrUserLoginId());
				return false;

			} else {
				String connIp = HttpHeaderUtils.getClientIPAddr(request);

				String expDate = DateUtils.getCurrentDate(Calendar.MINUTE, Integer.parseInt(mgrappSessionTimeoutMin),
						DateUtils.DATE_FORMAT_YMDHMS);

				if (randomKey != null && randomKey.length() > 0) {
					if (CCSSUtil.getMgrRandomKey().equals(randomKey)) {
						mgrAppSessionDao.updateMgrSessTime(sessionId, expDate, connIp, randomKey);
					} else {

						sessionMgrFailMsg(request, response, ResultCodeUtil.RC_6C000006, CCSSUtil.getMgrUserLoginId());
					}
				}
			}

		} catch (Exception e) {
			logger.error("sessionId({}) Exception({})", sessionId, e);
			return false;
		}

		if (logger.isDebugEnabled()) {
			logger.debug("checkSessionMgrApp OUT. sessionId({})", sessionId);
		}

		return true;
	}
	
	
	private boolean checkSessionMgrAppGetMethod(HttpServletRequest request, HttpServletResponse response) {
		String requestUrl = StringUtils.nvl(request.getRequestURI());
		String sessionId = StringUtils.nvl(request.getParameter("sessionId"));
		String randomKey = StringUtils.nvl(request.getParameter("randomKey"));

		if (logger.isDebugEnabled()) {
			logger.debug("checkSessionMgrApp IN. sessionId({}) requestUrl({})", sessionId, requestUrl);
		}

		try {
			// ignore URL Area
			if ( requestUrl.equals("/mgrapi/gcalendar/login") ||
					requestUrl.equals("/mgrapi/gcalendar/login/callback")
					) {
				return true;
			}


			if (sessionId == null || sessionId.length() == 0) {
				logger.error("abnormal sessionId value. sessionId({})", sessionId);
				sessionMgrFailMsg(request, response, ResultCodeUtil.RC_3C004000, CCSSUtil.getMgrUserLoginId());
				return false;
			}

			String mgrSessExpDt = CCSSUtil.getMgrSessExpDt();
			if (mgrSessExpDt == null || mgrSessExpDt.length() == 0) {
				logger.error("failed to select Mgrapp Session Info. sessionId({})", sessionId);
				sessionMgrFailMsg(request, response, ResultCodeUtil.RC_3C003007, CCSSUtil.getMgrUserLoginId());
				return false;
			}

			if (comparedSessionExpire(CCSSUtil.getMgrSessExpDt())) {
				logger.info("Mgr App Timeout Session. sessionId({}) mgrappLoginId({}) mgrSessExpDt({})", sessionId,
						CCSSUtil.getMgrUserLoginId(), CCSSUtil.getMgrSessExpDt());
				mgrAppSessionDao.deleteMgrSessByID(sessionId);
				sessionMgrFailMsg(request, response, ResultCodeUtil.RC_3C003008, CCSSUtil.getMgrUserLoginId());
				return false;

			} else {
				String connIp = HttpHeaderUtils.getClientIPAddr(request);

				String expDate = DateUtils.getCurrentDate(Calendar.MINUTE, Integer.parseInt(mgrappSessionTimeoutMin),
						DateUtils.DATE_FORMAT_YMDHMS);

				if (randomKey != null && randomKey.length() > 0) {
					if (CCSSUtil.getMgrRandomKey().equals(randomKey)) {
						mgrAppSessionDao.updateMgrSessTime(sessionId, expDate, connIp, randomKey);
					} else {

						sessionMgrFailMsg(request, response, ResultCodeUtil.RC_6C000006, CCSSUtil.getMgrUserLoginId());
					}
				}
			}

		} catch (Exception e) {
			logger.error("sessionId({}) Exception({})", sessionId, e);
			return false;
		}

		if (logger.isDebugEnabled()) {
			logger.debug("checkSessionMgrApp OUT. sessionId({})", sessionId);
		}

		return true;
	}

	public boolean comparedSessionExpire(String sessExpDt) {

		Date nowDt = new Date();
		Date expDt = DateUtils.stringToDate(sessExpDt);

		if (DateUtils.comparedExpDate(nowDt, expDt) < 0) {
			return true;
		}
		return false;
	}

	public void sessionMgrFailMsg(HttpServletRequest req, HttpServletResponse res, ResultCode resultCode, String ctn)
			throws IOException {
		res.setCharacterEncoding(StandardCharsets.UTF_8.toString());

		res.setHeader(HeaderConst.HD_NAME_CACHE_CONTROL, HeaderConst.HD_VALUE_NO_CACHE);
		res.setHeader(HTTP.CONTENT_TYPE, HeaderConst.HD_VALUE_CONTENTTYPE_JSON_UTF8);

		String transactionId = req.getHeader(HeaderConst.HD_NAME_TRANSACTION_ID);
		if (transactionId != null && transactionId.length() > 0) {
			res.setHeader(HeaderConst.HD_NAME_TRANSACTION_ID, transactionId);
		}

		res.getWriter().write(ResultCodeUtil.createResultMsgToJsonString(resultCode, MDC.get(MDCConst.API_ID)));

		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.RSP_TIME, TloData.getNowDate());
		tlo.put(TloData.RESULT_CODE, resultCode.getCode());

		TloUtil.setTloData(tlo);
		tloWriter.write(TloUtil.getTloData());

		traceWriter.trace(ctn, TraceConst.NODE_ID_WAS, MDC.get(MDCConst.TRACE_SOURCE), (HttpResponseWrapper) res);
	}

	private void setRequestLogAPI(HttpServletRequest request) {
		HttpRequestWrapper reqWrapper = (HttpRequestWrapper) request;

		byte[] body = reqWrapper.getBodyData();
		String content = new String(body, 0, body.length);

		Gson gson = new Gson();
		RequestJSON apiReq = gson.fromJson(content, RequestJSON.class);

		MDC.put(MDCConst.API_ID, apiReq.getCommon().getApiId());

		String requestUrl = StringUtils.nvl(request.getRequestURI());
		CCSSUtil.setCommonDataAPI(request, requestUrl, reqWrapper.getHeader("ccssToken"), apiReq);
		setRequestTraceAPI(reqWrapper, apiReq);
		setRequestTloDataAPI(reqWrapper, apiReq);
	}

	private void setRequestLogMGRAPI(HttpServletRequest request) {
		HttpRequestWrapper reqWrapper = (HttpRequestWrapper) request;

		byte[] body = reqWrapper.getBodyData();
		String content = new String(body, 0, body.length);

		Gson gson = new Gson();
		RequestJSON apiReq = gson.fromJson(content, RequestJSON.class);

		MDC.put(MDCConst.API_ID, apiReq.getCommon().getApiId());

		String requestUrl = StringUtils.nvl(request.getRequestURI());
		CCSSUtil.setCommonDataMgrApp(request, requestUrl, apiReq, reqWrapper.getHeader("sessionId"));
		setRequestTraceMGRAPI(reqWrapper, apiReq);
		setRequestTloDataMGRAPI(reqWrapper, apiReq);
	}
	
	private void setRequestLogMGRAPIGetMethod(HttpServletRequest request) {
		HttpRequestWrapper reqWrapper = (HttpRequestWrapper) request;

		String requestUrl = StringUtils.nvl(request.getRequestURI());
		CCSSUtil.setCommonDataMgrApp(request, requestUrl, null, reqWrapper.getParameter("sessionId"));
		setRequestTraceMGRAPIGetMethod(reqWrapper);
		setRequestTloDataMGRAPIGetMethod(reqWrapper);
	}
	
	private void setRequestLogPNDManager(HttpServletRequest request) {
		String userAgent = request.getHeader(HttpHeaders.USER_AGENT);

		String deviceCtn = "";
		String ccssToken = "";
		Matcher matcher = VALID_USER_AGENT_REGEX.matcher(userAgent);
		if (matcher.find()) {
			deviceCtn = matcher.group(1);
			ccssToken = matcher.group(2);
		}

		String requestUrl = StringUtils.nvl(request.getRequestURI());
		CCSSUtil.setCommonDataAPI(request, requestUrl, ccssToken, null);
		setRequestTloDataPNDManager(request);
		setRequestTracePNDManager(request);
	}

	private void setRequestLogMqtt(HttpServletRequest request) {
		setRequestTloDataMqtt(request);
	}
	
	private void setResponseLogAPI(HttpServletRequest request, HttpServletResponse response) {
		HttpRequestWrapper reqWrapper = (HttpRequestWrapper) request;
		HttpResponseWrapper resWrapper = (HttpResponseWrapper) response;

		String content = resWrapper.getResponseText();

		Gson gson = new Gson();
		ResponseJSON apiRes = gson.fromJson(content, ResponseJSON.class);

		setResponseTraceAPI(resWrapper);
		setResponseTloDataAPI(apiRes);

		tloWriter.write(TloUtil.getTloData());
	}

	private void setResponseLogMGRAPI(HttpServletRequest request, HttpServletResponse response) {
		HttpRequestWrapper reqWrapper = (HttpRequestWrapper) request;
		HttpResponseWrapper resWrapper = (HttpResponseWrapper) response;

		String content = resWrapper.getResponseText();

		Gson gson = new Gson();
		ResponseJSON apiRes = gson.fromJson(content, ResponseJSON.class);

		setResponseTraceMGRAPI(resWrapper);
		setResponseTloDataMGRAPI(apiRes);

		tloWriter.write(TloUtil.getTloData());
	}
	
	private void setResponseLogMGRAPIGetMethod(HttpServletRequest request, HttpServletResponse response) {
		HttpRequestWrapper reqWrapper = (HttpRequestWrapper) request;
		HttpResponseWrapper resWrapper = (HttpResponseWrapper) response;

		String content = resWrapper.getResponseText();
		ResponseJSON apiRes = null;

		if( content != null && content.length() > 0 )
		{
			Gson gson = new Gson();
			apiRes = gson.fromJson(content, ResponseJSON.class);
		}
		
		setResponseTraceMGRAPI(resWrapper);
		
		if( apiRes != null)
			setResponseTloDataMGRAPI(apiRes);
		else
			setResponseTloDataMGRAPI(ResultCodeUtil.RC_2S000000);

		tloWriter.write(TloUtil.getTloData());
	}

	private void setResponseLogPNDManager(HttpServletRequest request, HttpServletResponse response) {
		setResponseTloDataPNDManager(request, response);
		setResponseTracePNDManager(request, response);

		tloWriter.write(TloUtil.getTloData());
	}
	
	private void setResponseLogMqtt(HttpServletRequest request, HttpServletResponse response) {
		setResponseTloDataMqtt(request, response);

		tloWriter.write(TloUtil.getTloData());
	}

	private void setRequestTloDataAPI(HttpRequestWrapper reqWrapper, RequestJSON apiReq) {
		RequestCommonJSON common = apiReq.getCommon();

		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.LOG_TYPE, "SVC");
		tlo.put(TloData.SID, CCSSUtil.getCtn());

		tlo.put(TloData.REQ_TIME, TloData.getNowDate());

		tlo.put(TloData.CLIENT_IP, reqWrapper.getRemoteAddr());
		tlo.put(TloData.DEV_INFO, common.getLogData().getDevInfo());
		tlo.put(TloData.OS_INFO, common.getLogData().getOsInfo());
		tlo.put(TloData.NW_INFO, common.getLogData().getNwInfo());
		tlo.put(TloData.SVC_NAME, common.getLogData().getSvcName());
		tlo.put(TloData.DEV_MODEL, common.getLogData().getDevModel());
		tlo.put(TloData.CARRIER_TYPE, common.getLogData().getCarrierType());
		tlo.put(TloData.SESSION_ID, CCSSUtil.getCcssToken());
		tlo.put(TloData.SERVER_ID, serverId);
		tlo.put(TloData.MEMB_ID, CCSSUtil.getMembId());
		tlo.put(TloData.MEMB_NO, CCSSUtil.getMembNo());
		tlo.put(TloData.DEVICE_TYPE, common.getDevice().getDeviceType());
		tlo.put(TloData.APP_TYPE, common.getDevice().getAppType());
		tlo.put(TloData.CAR_OEM, common.getDevice().getCarOem());
		tlo.put(TloData.CLIENT_ID, CCSSUtil.getSerial());

		tlo.put(TloData.SVC_CLASS, TloUtil.getSvcClass(common.getApiId()));

		TloUtil.setTloData(tlo);
	}

	private void setRequestTloDataMGRAPI(HttpRequestWrapper reqWrapper, RequestJSON apiReq) {
		RequestCommonJSON common = apiReq.getCommon();

		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.LOG_TYPE, "SVC");
		tlo.put(TloData.SID, CCSSUtil.getMgrUserLoginId());

		tlo.put(TloData.REQ_TIME, TloData.getNowDate());

		tlo.put(TloData.CLIENT_IP, reqWrapper.getRemoteAddr());
		tlo.put(TloData.DEV_INFO, common.getLogData().getDevInfo());
		tlo.put(TloData.OS_INFO, common.getLogData().getOsInfo());
		tlo.put(TloData.NW_INFO, common.getLogData().getNwInfo());
		tlo.put(TloData.SVC_NAME, common.getLogData().getSvcName());
		tlo.put(TloData.DEV_MODEL, common.getLogData().getDevModel());
		tlo.put(TloData.CARRIER_TYPE, common.getLogData().getCarrierType());
		tlo.put(TloData.SESSION_ID, CCSSUtil.getMgrSessionId());
		tlo.put(TloData.SERVER_ID, serverId);
		tlo.put(TloData.MEMB_ID, CCSSUtil.getMembId());
		tlo.put(TloData.MEMB_NO, CCSSUtil.getMembNo());
		tlo.put(TloData.DEVICE_TYPE, common.getDevice().getDeviceType());
		tlo.put(TloData.APP_TYPE, common.getDevice().getAppType());
		tlo.put(TloData.CAR_OEM, common.getDevice().getCarOem());
		tlo.put(TloData.CLIENT_ID, CCSSUtil.getSerial());

		tlo.put(TloData.SVC_CLASS, TloUtil.getSvcClass(common.getApiId()));

		TloUtil.setTloData(tlo);
	}
	
	private void setRequestTloDataMGRAPIGetMethod(HttpRequestWrapper reqWrapper) {
		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.LOG_TYPE, "SVC");
		tlo.put(TloData.SID, CCSSUtil.getMgrUserLoginId());

		tlo.put(TloData.REQ_TIME, TloData.getNowDate());

		tlo.put(TloData.CLIENT_IP, reqWrapper.getRemoteAddr());
		tlo.put(TloData.DEV_INFO, "");
		tlo.put(TloData.OS_INFO, "");
		tlo.put(TloData.NW_INFO, "");
		tlo.put(TloData.SVC_NAME, "");
		tlo.put(TloData.DEV_MODEL, "");
		tlo.put(TloData.CARRIER_TYPE, "");
		tlo.put(TloData.SESSION_ID, CCSSUtil.getMgrSessionId());
		tlo.put(TloData.SERVER_ID, serverId);
		tlo.put(TloData.MEMB_ID, CCSSUtil.getMembId());
		tlo.put(TloData.MEMB_NO, CCSSUtil.getMembNo());
		tlo.put(TloData.DEVICE_TYPE, "");
		tlo.put(TloData.APP_TYPE, "");
		tlo.put(TloData.CAR_OEM, "");
		tlo.put(TloData.CLIENT_ID, CCSSUtil.getSerial());

		tlo.put(TloData.SVC_CLASS, TloUtil.getSvcClass(reqWrapper.getRequestURI()));

		TloUtil.setTloData(tlo);
	}

	private void setRequestTloDataPNDManager(HttpServletRequest req) {
		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.LOG_TYPE, "SVC");
		tlo.put(TloData.SID, CCSSUtil.getCtn());

		tlo.put(TloData.REQ_TIME, TloData.getNowDate());

		tlo.put(TloData.CLIENT_IP, req.getRemoteAddr());
		tlo.put(TloData.DEV_INFO, "none");
		tlo.put(TloData.OS_INFO, "none");
		tlo.put(TloData.NW_INFO, "none");
		tlo.put(TloData.SVC_NAME, "CCS");
		tlo.put(TloData.DEV_MODEL, "none");
		tlo.put(TloData.CARRIER_TYPE, "L");
		tlo.put(TloData.SESSION_ID, CCSSUtil.getCcssToken());
		tlo.put(TloData.SERVER_ID, serverId);
		tlo.put(TloData.MEMB_ID, CCSSUtil.getMembId());
		tlo.put(TloData.MEMB_NO, CCSSUtil.getMembNo());
		tlo.put(TloData.DEVICE_TYPE, "PND");
		tlo.put(TloData.APP_TYPE, "MANAGER_APP");
		tlo.put(TloData.CAR_OEM, "");
		tlo.put(TloData.CLIENT_ID, CCSSUtil.getSerial());

		tlo.put(TloData.SVC_CLASS, TloUtil.getSvcClass(StringUtils.nvl(req.getRequestURI())));

		TloUtil.setTloData(tlo);
	}

	private void setRequestTloDataMqtt(HttpServletRequest request) {
		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.LOG_TYPE, "SVC");
		tlo.put(TloData.SID, request.getParameter("username"));
		tlo.put(TloData.REQ_TIME, TloData.getNowDate());

		tlo.put(TloData.CLIENT_IP, request.getRemoteAddr());
		tlo.put(TloData.DEV_INFO, "");
		tlo.put(TloData.OS_INFO, "");
		tlo.put(TloData.NW_INFO, "");
		tlo.put(TloData.SVC_NAME, "");
		tlo.put(TloData.DEV_MODEL, "");
		tlo.put(TloData.CARRIER_TYPE, "");
		tlo.put(TloData.SESSION_ID, "");
		tlo.put(TloData.SERVER_ID, serverId);
		tlo.put(TloData.MEMB_ID, "");
		tlo.put(TloData.MEMB_NO, "");
		tlo.put(TloData.DEVICE_TYPE, "");
		tlo.put(TloData.APP_TYPE, "");
		tlo.put(TloData.CAR_OEM, "");
		tlo.put(TloData.CLIENT_ID, "");

		tlo.put(TloData.SVC_CLASS, TloUtil.getSvcClass(request.getRequestURI()));

		TloUtil.setTloData(tlo);
	}
	
	private void setResponseTloDataAPI(ResponseJSON apiRes) {
		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.RSP_TIME, TloData.getNowDate());
		tlo.put(TloData.RESULT_CODE, apiRes.getResultCode());

		TloUtil.setTloData(tlo);
	}

	private void setResponseTloDataMGRAPI(ResponseJSON apiRes) {
		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.RSP_TIME, TloData.getNowDate());
		tlo.put(TloData.RESULT_CODE, apiRes.getResultCode());

		TloUtil.setTloData(tlo);
	}
	
	private void setResponseTloDataMGRAPI(ResultCode resultCode) {
		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.RSP_TIME, TloData.getNowDate());
		tlo.put(TloData.RESULT_CODE, resultCode.getCode());

		TloUtil.setTloData(tlo);
	}

	private void setResponseTloDataPNDManager(HttpServletRequest request, HttpServletResponse response) {
		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.RSP_TIME, TloData.getNowDate());

		/*
		 * String requestUrl = StringUtils.nvl(request.getRequestURI()); if
		 * (requestUrl.endsWith(".do")) { if (response.getStatus() == HttpStatus.SC_OK)
		 * { tlo.put(TloData.RESULT_CODE, ResultCodeUtil.RC_2S000000.getCode()); } else
		 * { tlo.put(TloData.RESULT_CODE, ResultCodeUtil.RC_4C005000.getCode()); } }
		 * else { HttpResponseWrapper resWrapper = (HttpResponseWrapper) response;
		 * String content = resWrapper.getResponseText();
		 * 
		 * Gson gson = new Gson(); Map<String, String> map = gson.fromJson(content,
		 * Map.class); String resultCode = map.get("resultCode"); if
		 * ("0000".equals(resultCode)) { tlo.put(TloData.RESULT_CODE,
		 * ResultCodeUtil.RC_2S000000.getCode()); } else { tlo.put(TloData.RESULT_CODE,
		 * ResultCodeUtil.RC_4C005000.getCode()); } }
		 */

		if (response.getStatus() == HttpStatus.SC_OK) {
			tlo.put(TloData.RESULT_CODE, ResultCodeUtil.RC_2S000000.getCode());
		} else {
			tlo.put(TloData.RESULT_CODE, ResultCodeUtil.RC_4C005000.getCode());
		}

		TloUtil.setTloData(tlo);
	}
	
	private void setResponseTloDataMqtt(HttpServletRequest request, HttpServletResponse response) {
		Map<String, String> tlo = new HashMap<String, String>();
		tlo.put(TloData.RSP_TIME, TloData.getNowDate());
		
		if (response.getStatus() == HttpStatus.SC_OK) {
			tlo.put(TloData.RESULT_CODE, ResultCodeUtil.RC_2S000000.getCode());
		} else {
			tlo.put(TloData.RESULT_CODE, ResultCodeUtil.RC_4C005007.getCode());
		}

		TloUtil.setTloData(tlo);
	}		

	private void setRequestTraceAPI(HttpRequestWrapper reqWrapper, RequestJSON apiReq) {

		String source = apiReq.getCommon().getDevice().getDeviceType() + ":"
				+ apiReq.getCommon().getDevice().getAppType();

		traceWriter.trace(CCSSUtil.getCtn(), source, TraceConst.NODE_ID_WAS, reqWrapper);

		MDC.put(MDCConst.TRACE_SOURCE, source);
	}

	private void setRequestTraceMGRAPI(HttpRequestWrapper reqWrapper, RequestJSON apiReq) {

		String source = apiReq.getCommon().getDevice().getDeviceType() + ":"
				+ apiReq.getCommon().getDevice().getAppType();

		traceWriter.trace(CCSSUtil.getMgrUserLoginId(), source, TraceConst.NODE_ID_WAS, reqWrapper);

		MDC.put(MDCConst.TRACE_SOURCE, source);
	}
	
	private void setRequestTraceMGRAPIGetMethod(HttpRequestWrapper reqWrapper) {

		String source = reqWrapper.getRemoteAddr() + ":" + reqWrapper.getRemotePort();

		traceWriter.trace(CCSSUtil.getMgrUserLoginId(), source, TraceConst.NODE_ID_WAS, reqWrapper);

		MDC.put(MDCConst.TRACE_SOURCE, source);
	}

	private void setRequestTracePNDManager(HttpServletRequest request) {

		String source = "PND:MANAGER_APP";

		traceWriter.trace(CCSSUtil.getCtn(), source, TraceConst.NODE_ID_WAS, request);

		MDC.put(MDCConst.TRACE_SOURCE, source);
	}

	private void setResponseTraceAPI(HttpResponseWrapper resWrapper) {

		traceWriter.trace(CCSSUtil.getCtn(), TraceConst.NODE_ID_WAS, MDC.get(MDCConst.TRACE_SOURCE), resWrapper);
	}

	private void setResponseTraceMGRAPI(HttpResponseWrapper resWrapper) {

		traceWriter.trace(CCSSUtil.getMgrUserLoginId(), TraceConst.NODE_ID_WAS, MDC.get(MDCConst.TRACE_SOURCE), resWrapper);
	}

	private void setResponseTracePNDManager(HttpServletRequest request, HttpServletResponse response) {

		/*
		 * String requestUrl = StringUtils.nvl(request.getRequestURI()); if
		 * (requestUrl.endsWith(".do")) { traceWriter.trace(CCSSUtil.getCtn(),
		 * TraceConst.NODE_ID_WAS, MDC.get(MDCConst.TRACE_SOURCE), response); } else {
		 * traceWriter.trace(CCSSUtil.getCtn(), TraceConst.NODE_ID_WAS,
		 * MDC.get(MDCConst.TRACE_SOURCE), (HttpResponseWrapper) response); }
		 */

		traceWriter.trace(CCSSUtil.getCtn(), TraceConst.NODE_ID_WAS, MDC.get(MDCConst.TRACE_SOURCE), response);
	}

	@Override
	public void setMessageSource(MessageSource messageSource) {
		// TODO Auto-generated method stub

	}
}